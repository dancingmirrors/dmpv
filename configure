#!/usr/bin/env python3

import os
from TOOLS.configure_common import *

begin()

# (workaround for insufficient Python lambda syntax)
def chain(*a):
    return a[-1]

check("-lgpl",
      desc      = "LGPL (version 2.1 or later) build",
      default   = False)
check("gpl*",
      desc      = "GPL (version 2 or later) build",
      deps_neg  = "lgpl")

check(desc      = "whether the compiler works",
      required  = "Required.",
      fn        = lambda: check_program("CC") and check_cc(link = []))
check(desc      = "pkg-config",
      required  = "Required.",
      fn        = lambda: check_program("PKG_CONFIG"))

add_cflags("-MD", "-MP", "-D_ISOC99_SOURCE", "-D_GNU_SOURCE",
           "-D_LARGEFILE_SOURCE", "-D_FILE_OFFSET_BITS=64",
           "-D_LARGEFILE64_SOURCE", "-Wall", "-fno-strict-aliasing",
           "-g3")
check(desc      = "C11/C99",
      fn        = lambda: check_cc(flags = "-std=c11") or
                          check_cc(flags = "-std=c99"),
      required  = "Required.")
check("-optimize",
      fn        = lambda: chain(add_cflags("-O3", "-march=native",
                                "-pipe", "-fno-signed-zeros",
                                "-fno-trapping-math"), True),
      desc      = "whether to optimize")
check(desc      = "warning CFLAGS",
      fn        = lambda: check_cc(flags = [
                        "-Werror=implicit-function-declaration",
                        "-Wno-error=deprecated-declarations",
                        "-Wno-error=unused-function",
                        "-Wempty-body",
                        "-Wdisabled-optimization",
                        "-Wstrict-prototypes",
                        "-Werror=format-security",
                        "-Wvla", "-Wundef",
                        "-Wno-pointer-sign",
                        "-Wno-switch",
                        "-Wno-unused-result"]))

check("gnuc",
      desc      = "GNU C",
      fn        = lambda: check_cc(defined = "__GNUC__"))
check("clang",
      desc      = "clang",
      fn        = lambda: check_cc(defined = "__clang__"))

check("libdl*",
      fn        = lambda: check_cc(link = "-ldl", include = "dlfcn.h",
                                   expr = 'dlopen("", 0);'))
check("libm",
      fn        = lambda: check_cc(link = "-lm"))

check(desc      = "-fno-math-errno",
      fn        = lambda: check_cc(flags = "-fno-math-errno"))

check(desc      = "extra GCC warnings",
      deps      = "gnuc",
      deps_neg  = "clang",
      fn        = lambda: check_cc(flags = [
                        "-Wmissing-prototypes", "-Wshadow",
                        "-Wparentheses", "-Wpointer-arith"]))
check(desc      = "extra clang warnings",
      deps      = "clang",
      fn        = lambda: check_cc(flags = [
                        "-Wno-logical-op-parentheses", "-fcolor-diagnostics",
                        "-Wno-tautological-compare",
                        "-Wno-tautological-constant-out-of-range-compare",
                        "-Wno-constant-logical-operand",
                        "-Wunreachable-code-aggressive"]))

check("-usan",
      desc      = "undefined sanitizer",
      fn        = lambda: check_cc(flags = "-fsanitize=undefined", link = []))

check("-git*",
      required  = "Required.",
      fn        = lambda: check_program("GIT"))

check(desc      = "-fstack-protector-strong",
      fn        = lambda: check_cc(flags = "-fstack-protector-strong"))

check(fn        = lambda: check_cc(include = "unistd.h",
                                   defined = "_POSIX_VERSION"),
      required  = "Required.",
      sources   = ["osdep/language-posix.c",
                   "osdep/polldev.c",
                   "sub/filter_regex.c",
                   "osdep/path-unix.c"])

check(fn        = lambda: check_cc(link = "-pthread", flags = "-pthread",
                                   include = "pthread.h",
                                   expr = "pthread_self();"),
      required  = "Required.")

check(desc      = "stdatomic.h",
      fn        = lambda: check_cc(include = "stdatomic.h",
                                   expr =
                        "atomic_int_least64_t test = ATOMIC_VAR_INIT(123);"
                        "atomic_fetch_add(&test, 1);"),
      required  = "Required.")

check("-libiconv-plug*",
      desc      = "-DLIBICONV_PLUG",
      fn        = lambda: check_cc(flags = "-DLIBICONV_PLUG"))
check("iconv*",
      fn        = lambda: check_cc(include = "iconv.h", link = [],
                                   expr = "iconv_open(0, 0);") or
                          check_cc(include = "iconv.h", link = "-liconv",
                                   expr = "iconv_open(0, 0);"))
check("-uchardet*",
      deps      = "iconv",
      fn        = lambda: check_pkg_config("uchardet"))

check(fn        = lambda: check_cc(include = "glob.h",
                                   expr = 'glob("filename", 0, 0, 0);'),
      required  = "Required.")
check(fn        = lambda: check_cc(include = "sys/stat.h", expr = "fchmod(0, 0);"),
      required  = "Required.")

check("glibc-thread-name*",
      fn        = lambda: check_cc(include = "pthread.h",
                    expr = 'pthread_setname_np(pthread_self(), "ducks");'))
check("bsd-thread-name*",
      fn        = lambda: check_cc(include = ["pthread.h", "pthread_np.h"],
                    expr = 'pthread_set_name_np(pthread_self(), "ducks");')
                  or check_cc(include = "pthread.h", expr = 'char name; pthread_setname_np(pthread_self(), "%s", name);'))

check("bsd-fstatfs*",
      desc      = "BSD fstatfs",
      fn        = lambda: check_cc(include = ["sys/param.h", "sys/mount.h"],
                    expr = "struct statfs fs; fstatfs(0, &fs); fs.f_fstypename;"))
check("linux-fstatfs*",
      desc      = "Linux fstatfs",
      fn        = lambda: check_cc(include = "sys/vfs.h",
                    expr = "struct statfs fs; fstatfs(0, &fs); fs.f_namelen;"))

check("-lua*",
      desc      = "Lua support",
      fn        = lambda: check_pkg_config("luajit >= 2.0.0") or
                          check_pkg_config("lua-5.1") or
                          check_pkg_config("lua-5.2") or
                          check_pkg_config("lua >= 5.1.0"),
      sources   = "player/lua.c")

check("-libass*",
      desc      = "libass subtitle/OSD renderer",
      fn        = lambda: check_pkg_config("libass >= 0.17.0"),
      required  = "Required.",
      sources   = ["sub/ass_mp.c",
                   "sub/osd_libass.c",
                   "sub/sd_ass.c"])

check(fn        = lambda: check_cc(link = "-lz", include = "zlib.h",
                                   expr = "inflate(0, Z_NO_FLUSH);"),
      required  = "Required.")

check("-lcms2*",
      desc      = "Little Color Management System 2",
      fn        = lambda: check_pkg_config("lcms2 >= 2.6"))

check("-libarchive*",
      desc      = "libarchive wrapper for reading zip files and more",
      fn        = lambda: check_pkg_config("libarchive >= 3.0.0"),
      sources   = ["demux/demux_libarchive.c",
                   "stream/stream_libarchive.c"])

check(desc      = "FFmpeg",
      fn        = lambda: check_pkg_config(
                    "libavutil      >= 59.34.100",
                    "libavcodec     >= 60.31.102",
                    "libavformat    >= 60.16.100",
                    "libswscale     >= 7.5.100",
                    "libavfilter    >= 9.12.100",
                    "libswresample  >= 4.12.100"),
      required  = "Required.")
check("-libavdevice*",
      fn        = lambda: check_pkg_config("libavdevice >= 60.3.100"))

check("-oss*",
      desc      = "OSS audio output",
      deps      = "gpl",
      fn        = lambda: check_cc(include = "sys/soundcard.h",
                  expr = "SNDCTL_DSP_HALT;"),
      sources   = "audio/out/ao_oss.c")
check("-sndio*",
      desc      = "sndio audio output",
      fn        = lambda: check_pkg_config("sndio >= 1.0.0"),
      sources   = "audio/out/ao_sndio.c")
check("-alsa*",
      desc      = "ALSA audio output",
      fn        = lambda: check_pkg_config("alsa >= 1.0.18"),
      sources   = "audio/out/ao_alsa.c")

check("wsdisplay-usl-io-h*",
      fn        = lambda: check_cc(include = ["sys/types.h",
                  "dev/wscons/wsdisplay_usl_io.h"]))
check("vt_h*",
      fn        = lambda: check_cc(include = ["sys/vt.h", "sys/ioctl.h"],
                                   expr = "int m; ioctl(0, VT_GETMODE, &m);"))
check("consio_h*",
      deps_neg  = "vt_h",
      fn        = lambda: check_cc(include = ["sys/consio.h", "sys/ioctl.h"],
                                   expr = "int m; ioctl(0, VT_GETMODE, &m);"))
check("-drm*",
      desc      = "Direct Rendering Manager",
      deps_any  = ["wsdisplay-usl-io-h", "vt_h", "consio_h"],
      fn        = lambda: check_pkg_config("libdrm >= 2.4.105"),
      required  = "Required.",
      sources   = ["video/out/drm_atomic.c",
                   "video/out/drm_common.c",
                   "video/out/vo_drm.c"])
check("-drmprime*",
      fn        = lambda: check_cc(include = "libavutil/pixfmt.h",
                                   expr = "int i = AV_PIX_FMT_DRM_PRIME;"))
check(deps      = ["drm", "drmprime"],
      sources   = ["video/drmprime.c",
                   "video/out/drm_prime.c",
                   "video/out/hwdec/hwdec_drmprime.c",
                   "video/out/hwdec/hwdec_drmprime_overlay.c"])

check("gbm",
      fn        = lambda: check_pkg_config("gbm"))

check("-libplacebo*",
      desc      = "libplacebo support",
      fn        = lambda: check_pkg_config("libplacebo >= 6.338.2"),
      sources   = ["video/out/placebo/ra_pl.c",
                   "video/out/placebo/utils.c"])

def check_wayland_protos():
    data = get_pkg_config_variable("wayland-protocols", "pkgdatadir")
    if data is None:
        return False
    add_config_mak_var("WL_PROTO_DIR", data)
    return True
check("-wayland*",
      fn        = lambda: check_wayland_protos() and
                          check_cc(include = "linux/input-event-codes.h",
                                   link = []) and
                          check_program("WAYSCAN") and
                          check_pkg_config("wayland-client    >= 1.21.0",
                                           "wayland-cursor    >= 1.21.0",
                                           "wayland-protocols >= 1.38",
                                           "xkbcommon         >= 0.3.0"),
      sources   = ["video/out/wayland_common.c",
                   "$(BUILD)/generated/wayland/idle-inhibit-unstable-v1.c",
                   "$(BUILD)/generated/wayland/presentation-time.c",
                   "$(BUILD)/generated/wayland/xdg-shell.c",
                   "$(BUILD)/generated/wayland/fractional-scale-v1.c",
                   "$(BUILD)/generated/wayland/cursor-shape-v1.c",
                   "$(BUILD)/generated/wayland/tablet-v2.c",
                   "$(BUILD)/generated/wayland/xdg-decoration-unstable-v1.c",
                   "$(BUILD)/generated/wayland/xdg-activation-v1.c",
                   "$(BUILD)/generated/wayland/viewporter.c",
                   "$(BUILD)/generated/wayland/linux-dmabuf-unstable-v1.c",
                   "$(BUILD)/generated/wayland/fifo-v1.c"])
check("memfd-create*",
      desc      = "memfd_create()",
      deps      = "wayland",
      fn        = lambda: check_cc(include = "sys/mman.h", link = [],
                                   expr = "memfd_create(0, MFD_CLOEXEC | MFD_ALLOW_SEALING);"))

check("-x11*",
      desc      = "X11",
      deps      = "gpl",
      fn        = lambda: check_pkg_config("x11         >= 1.0.0",
                                           "xscrnsaver  >= 1.0.0",
                                           "xext        >= 1.0.0",
                                           "xinerama    >= 1.0.0",
                                           "xpresent    >= 1.0.0",
                                           "xrandr      >= 1.2.0"),
      sources   = "video/out/x11_common.c")

check("-vulkan*",
      desc      = "Vulkan context support",
      deps      = "libplacebo",
      fn        = lambda: check_pkg_config("vulkan"),
      sources   = ["video/out/vulkan/context.c",
                   "video/out/vulkan/utils.c",
                   "video/out/hwdec/hwdec_vulkan.c",
                   "video/out/vulkan/context_display.c"])
check(deps      = ["vulkan", "x11"],
      sources   = "video/out/vulkan/context_xlib.c")
check(deps      = ["vulkan", "wayland"],
      sources   = "video/out/vulkan/context_wayland.c")

check("-egl*",
      desc      = "EGL 1.4",
      fn        = lambda: check_pkg_config("egl"),
      required  = "Required.")
check("-gl-x11*",
      desc      = "OpenGL X11 Backend",
      deps      = ["egl", "x11"],
      fn        = lambda: check_cc(link = "-lGL",
                                   include = "GL/glx.h",
                                   expr = "glXGetCurrentDisplay();"),
      sources   = "video/out/opengl/context_glx.c")
check("-egl-x11*",
      desc      = "OpenGL X11 EGL Backend",
      deps      = ["x11", "egl", "gbm"],
      sources   = "video/out/opengl/context_x11egl.c")
check("-egl-drm*",
      desc      = "OpenGL DRM EGL Backend",
      deps      = ["drm", "gbm", "egl"],
      sources   = "video/out/opengl/context_drm_egl.c")
check("-gl-wayland*",
      desc      = "OpenGL Wayland Backend",
      deps      =  ["wayland", "egl"],
      fn        = lambda: check_pkg_config("wayland-egl >= 9.0.0"),
      sources   = "video/out/opengl/context_wayland.c")

check("-vaapi*",
      desc      = "VA-API acceleration",
      fn        = lambda: check_pkg_config("libva >= 0.36.0"),
      sources   = ["video/vaapi.c",
                   "video/filter/vf_vavpp.c"])
check("-vaapi-x11*",
      desc      = "VA-API (X11 support)",
      deps      = ["vaapi", "x11"],
      fn        = lambda: check_pkg_config("libva-x11 >= 0.36.0"))
check("-vaapi-wayland*",
      desc      = "VA-API (Wayland support)",
      deps      = ["vaapi", "gl-wayland"],
      fn        = lambda: check_pkg_config("libva-wayland >= 0.36.0"))
check("-vaapi-drm*",
      desc      = "VA-API (DRM/EGL support)",
      deps      = ["vaapi", "egl-drm"],
      fn        = lambda: check_pkg_config("libva-drm >= 0.36.0"))
check("-vaapi-glx*",
      desc      = "VA-API GLX",
      deps      = ["gpl", "vaapi-x11", "gl-x11"])
check("-vaapi-x-egl*",
      desc      = "VA-API EGL on X11",
      deps      = ["vaapi-x11", "egl-x11"])
check("-vaapi-vulkan*",
      desc      = "VA-API Vulkan",
      deps      = ["vaapi", "vulkan"],
      sources   = ["video/out/hwdec/hwdec_vaapi.c"])
check("-vaapi-egl*",
      desc      = "VA-API EGL",
      deps_any  = ["vaapi-x-egl", "vaapi-wayland"],
      sources   = ["video/out/hwdec/hwdec_vaapi.c"])

check("-jpeg*",
      desc      = "JPEG support",
      fn        = lambda: chain (check_pkg_config("libjxl.pc"),
                                 check_cc(include = ["stdio.h", "jpeglib.h"],
                                          link = "-ljpeg")))

check("-shaderc-shared",
      desc      = "libshaderc SPIR-V compiler (shared library)",
      fn        = lambda: check_cc(include = "shaderc/shaderc.h",
                                   link = "-lshaderc_shared"))
check("-shaderc-static",
      desc      = "libshaderc SPIR-V compiler (static library)",
      deps_neg  = "shaderc-shared",
      fn        = lambda: check_cc(include = "shaderc/shaderc.h",
                                   link = ["-lshaderc_combined", "-lstdc++"]))
check("shaderc*",
      desc      = "libshaderc SPIR-V compiler",
      deps_any  = ["shaderc-shared", "shaderc-static"],
      sources   = "video/out/gpu/spirv_shaderc.c")
check("-spirv-cross-shared",
      desc      = "SPIRV-Cross SPIR-V shader converter (shared library)",
      fn        = lambda: check_pkg_config("spirv-cross-c-shared"))
check("-spirv-cross-static",
      desc      = "SPIRV-Cross SPIR-V shader converter (static library)",
      deps_neg  = "spirv-cross-shared",
      fn        = lambda: check_pkg_config("spirv-cross"))
check("spirv-cross*",
      desc      = "SPIRV-Cross SPIR-V shader converter",
      deps_any  = ["spirv-cross-shared", "spirv-cross-static"])

check("-gl*",
      desc      = "OpenGL context support",
      deps_any  = ["gl-x11", "egl-x11", "egl-drm", "gl-wayland"],
      required  = "Required.",
      sources   = ["video/out/opengl/common.c",
                   "video/out/opengl/context.c",
                   "video/out/opengl/formats.c",
                   "video/out/opengl/ra_gl.c",
                   "video/out/opengl/utils.c"])

check(deps      = ["drm", "egl", "gbm", "gl"],
      sources   = "video/out/hwdec/dmabuf_interop_gl.c")

check("egl-helpers*",
      desc      = "EGL helper functions",
      deps_any  = ["egl-x11", "gl-wayland"],
      sources   = "video/out/opengl/egl_helpers.c"),

check(deps_any   = ["drm", "x11", "wayland"],
      sources    = "video/out/present_sync.c")

check(deps      = ["vulkan", "wayland"],
      sources   = "video/out/vulkan/context_wayland.c")
check(deps      = ["vulkan", "x11"],
      sources   = "video/out/vulkan/context_xlib.c")

check(deps      = ["drm", "gl", "egl"],
      sources   = "video/out/hwdec/dmabuf_interop_gl.c")
check(deps      = ["drm", "gl", "egl", "libplacebo", "vaapi"],
      sources   = "video/out/hwdec/dmabuf_interop_pl.c")

check(deps      = ["gl", "egl", "egl-helpers"],
      sources   = "video/filter/vf_gpu.c")

check("-sdl2*",
      desc      = "SDL video output",
      fn        = lambda: check_pkg_config("sdl2"),
      sources   = "video/out/vo_sdl.c")

add_sources(
    "audio/aframe.c",
    "audio/chmap.c",
    "audio/chmap_avchannel.c",
    "audio/chmap_sel.c",
    "audio/decode/ad_lavc.c",
    "audio/decode/ad_spdif.c",
    "audio/filter/af_drop.c",
    "audio/filter/af_format.c",
    "audio/filter/af_lavcac3enc.c",
    "audio/filter/af_scaletempo.c",
    "audio/fmt-conversion.c",
    "audio/format.c",
    "audio/out/ao.c",
    "audio/out/ao_lavc.c",
    "audio/out/ao_null.c",
    "audio/out/ao_pcm.c",
    "audio/out/buffer.c",
    "common/av_common.c",
    "common/av_log.c",
    "common/codecs.c",
    "common/common.c",
    "common/encode_lavc.c",
    "common/msg.c",
    "common/playlist.c",
    "common/recorder.c",
    "common/stats.c",
    "common/tags.c",
    "common/version.c",
    "demux/cache.c",
    "demux/codec_tags.c",
    "demux/cue.c",
    "demux/demux.c",
    "demux/demux_cue.c",
    "demux/demux_edl.c",
    "demux/demux_lavf.c",
    "demux/demux_mf.c",
    "demux/demux_mkv.c",
    "demux/demux_mkv_timeline.c",
    "demux/demux_null.c",
    "demux/demux_playlist.c",
    "demux/demux_raw.c",
    "demux/demux_timeline.c",
    "demux/ebml.c",
    "demux/packet.c",
    "demux/timeline.c",
    "filters/filter.c",
    "filters/f_async_queue.c",
    "filters/f_auto_filters.c",
    "filters/f_autoconvert.c",
    "filters/f_decoder_wrapper.c",
    "filters/f_demux_in.c",
    "filters/f_hwtransfer.c",
    "filters/f_lavfi.c",
    "filters/f_output_chain.c",
    "filters/f_swresample.c",
    "filters/f_swscale.c",
    "filters/f_utils.c",
    "filters/frame.c",
    "filters/user_filters.c",
    "input/cmd.c",
    "input/event.c",
    "input/input.c",
    "input/ipc.c",
    "input/ipc-unix.c",
    "input/keycodes.c",
    "misc/bstr.c",
    "misc/charset_conv.c",
    "misc/dispatch.c",
    "misc/json.c",
    "misc/language.c",
    "misc/natural_sort.c",
    "misc/node.c",
    "misc/random.c",
    "misc/rendezvous.c",
    "misc/ta.c",
    "misc/ta_talloc.c",
    "misc/ta_utils.c",
    "misc/thread_pool.c",
    "misc/thread_tools.c",
    "options/m_config_core.c",
    "options/m_config_frontend.c",
    "options/m_option.c",
    "options/m_property.c",
    "options/options.c",
    "options/parse_commandline.c",
    "options/parse_configfile.c",
    "options/path.c",
    "osdep/main-fn-unix.c",
    "osdep/io.c",
    "osdep/subprocess.c",
    "osdep/subprocess-posix.c",
    "osdep/terminal-unix.c",
    "osdep/threads.c",
    "osdep/timer.c",
    "osdep/timer-unix.c",
    "player/audio.c",
    "player/client.c",
    "player/command.c",
    "player/configfiles.c",
    "player/external_files.c",
    "player/loadfile.c",
    "player/main.c",
    "player/misc.c",
    "player/osd.c",
    "player/playloop.c",
    "player/screenshot.c",
    "player/scripting.c",
    "player/sub.c",
    "player/video.c",
    "stream/cookies.c",
    "stream/stream.c",
    "stream/stream_avdevice.c",
    "stream/stream_cb.c",
    "stream/stream_concat.c",
    "stream/stream_edl.c",
    "stream/stream_file.c",
    "stream/stream_lavf.c",
    "stream/stream_memory.c",
    "stream/stream_mf.c",
    "stream/stream_null.c",
    "stream/stream_slice.c",
    "sub/dec_sub.c",
    "sub/draw_bmp.c",
    "sub/filter_sdh.c",
    "sub/img_convert.c",
    "sub/lavc_conv.c",
    "sub/osd.c",
    "sub/sd_lavc.c",
    "video/csputils.c",
    "video/filter/refqueue.c",
    "video/filter/vf_format.c",
    "video/filter/vf_sub.c",
    "video/fmt-conversion.c",
    "video/hwdec.c",
    "video/image_loader.c",
    "video/image_writer.c",
    "video/img_format.c",
    "video/mp_image.c",
    "video/mp_image_pool.c",
    "video/vd_lavc.c",
    "video/out/aspect.c",
    "video/out/bitmap_packer.c",
    "video/out/dither.c",
    "video/out/dr_helper.c",
    "video/out/filter_kernels.c",
    "video/out/gpu/context.c",
    "video/out/gpu/error_diffusion.c",
    "video/out/gpu/hwdec.c",
    "video/out/gpu/lcms.c",
    "video/out/gpu/osd.c",
    "video/out/gpu/ra.c",
    "video/out/gpu/shader_cache.c",
    "video/out/gpu/spirv.c",
    "video/out/gpu/user_shaders.c",
    "video/out/gpu/utils.c",
    "video/out/gpu/video.c",
    "video/out/gpu/video_shaders.c",
    "video/out/vo.c",
    "video/out/vo_gpu.c",
    "video/out/vo_image.c",
    "video/out/vo_lavc.c",
    "video/out/vo_null.c",
    "video/out/win_state.c",
    "video/repack.c",
    "video/sws_utils.c",
)

finish()
